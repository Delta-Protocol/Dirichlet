- file Connect bug: shift with computed lhs miscalculated
- allow unequal sized numbers, e.g. when adding
- add allocator to radix32-integer
- process both roots during a single pass
- combine small factors when sieving into a single pattern

- add "right justify" method to IntegerMath

- try log(2 * x * sqrt(n)) as the cutoff: http://www.crypto-world.com/documents/contini_siqs.pdf
- convert to "round" instead of "cieling" for LogScale
- try sieving for 2 with a large number
- port multiplier code from msieve

- don't sieve for factors of multiplier (investigate first)
- for q[l], polynomial(x) | q[l] iff x = -c (2 b)^-1 mod q[l]
- fix ModularSquareRoot mod 2 if value is even, more generally if value mod modulus == 0

f(0) = -1
f(-1) = 1
f(1) = 1

f(x) = a x^2 + b x + c

f(0) = -1 = c
f(-1) = 1 = a - b + c
f(1) = 1 = a + b + c

c = -1

a - b - 1 = 1
a + b - 1 = 1

a - b = 2
a + b = 2

2 a = 4
a = 2
b = 0

f(x) = 2 x^2 - 1

f(x) = (ax + b)^2 - n

- merge add relation and create relation
- write integer mod/pow

a * b % n

         u1    u0
         v1    v0
-----------------
      u1*v0 u0*v0
u1*v1 u0*v1


- add integer reducer
- remove check from Montgomery for Montgomery32

b ^ (u1 * w + u0)

b ^ (u1 * w) * b ^ u0

b ^ w ^ u1 * b ^ u0

(2 ^ 64) ^ u1 * 2 ^ u0

- re-evaluate PPRS parameters, e.g. try increasing factor base size
- reuse PPRS infrastructure for PRS

a % d = a % (2^s dOdd) = a - (a / d) * d = a - (a / 2^s  2^s / dOdd dOdd

GCD(2^s, dOdd) = 1

if dOdd = 1:

a % d = a & ~(2^s - 1)

if d = 6, s = 1, dOdd = 3:

0 % 2 = 0, 0 % 3 = 0, 0 % 6 = 0
1 % 2 = 1, 1 % 3 = 1, 1 % 6 = 1
2 % 2 = 0, 2 % 3 = 2, 2 % 6 = 2
3 % 2 = 1, 3 % 3 = 0, 3 % 6 = 3
4 % 2 = 0, 4 % 3 = 1, 4 % 6 = 4
5 % 2 = 1, 5 % 3 = 2, 5 % 6 = 5

if a = 2^s aOdd and aOdd % 2 == 1:

a ^ e % 2^n = (2^s aOdd) ^ e % 2^n = (aOdd ^ e % 2^n) ^ 2^s % 2^n

result = aOdd ^ e % 2^n = aOdd ^ (e % 2^(n - 1)) % 2^n, and result % 2 == 1

a ^ e % 2^n = result ^ 2^s % 2^n = (result << s) & (2^n - 1)

u = (u1 * 2^n) + u0

u % d = (u1 % d) * (2^n % d) + u0 % d

modWord = 2^n % d

u % d = u1 % d * modWord + u0 % d

u / d = u1 * 2^n / d

u0 u1 * v0 v1 v2

u0 * v0  u0 * v1  u0 * v2
         u1 * v0  u1 * v1  u1 * v2

(a % b) / b mod 2^n = a * bInv mod 2^n

a divides b
a ?/ b
a ?!/ b
gcd(a, b)

a < b < c
floor division: //
move exact division to operations?
sqrt(2) should not equal 1

x = 14 (mod 13)

a = 2
b = 3
c = a b

floor(2/3).Type does the wrong thing, parsed as floor(divide(2,3).Type)

floor should return a rational

could add a modular factorial operator

(a + 1)^2 = a^2 + 2*a + 1

(m + 2^i)^2 <= n

m^2 + 2 m 2^i + 2^(2i) <= n
m^2 + 2m 2^i

Sum(1, i = 1 ... log n) = log n
Sum(1/i, i = 1 ... log n) = O(log log n)
Sum(1/i, i = 1 ... log n; isprime i) = O(log log log n)

[1 ... floor log n].Where(i => isprime i).Sum(i => 1/i)

add primorial to IntegerMath, add # primorial operator

need constants like pi

add trig functions, sin, cos, tan, etc.

add binomial coefficients

add gamma function

- Euler zeta function
- Euler product formula
- analytic continuation from Re(s) > 1 to Re(s) > 0
  - http://www.proofwiki.org/wiki/Analytic_Continuation_of_the_Riemann_Zeta_Function
  - Abel's lemma
  - reverse integration
  - collection of adjacent integrals
  - rewrite floor as variable less fractional part
  - solve former definite exactly assuming subset Re(s) > 1 for uniqueness
  - latter integral converges for all Re(s) > 0
- functional equation using gamma function extending to Re(s) < 0
  - http://www.proofwiki.org/wiki/Equivalence_of_Riemann_Zeta_Function_Definitions
- convert to entire function to eliminate pole
- expand to expression using zeros with the Weierstrass factorization theorem
  - http://en.wikipedia.org/wiki/Weierstrass_factorization_theorem
- Take the logrithmic derivative
  - http://en.wikipedia.org/wiki/Logarithmic_derivative

Assume there are a finite number of twin primes.
Then there is a largest pair of primes, p[max] and p[max] + 2.
For every prime p[i] larger than this pair, p[i] + 2 is composite.
Consider p[max] < p[i] < p[max]^2.
p[i] + 2 is divisible by a prime less than p[max].

4....
3x...
2x...
1xxx.
 1234

Sum(tau(n), n = [1,4)) = 3 + 1 + 1 = 5 = 2*Sum(floor(3.5/a), a = [1,2)) - isqrt(3.5)^2 = 2(3) - 1 = 5

9.........
8x........
7x........
6x........
5x........
4xx.......
3xx.......
2xxxx.....
1xxxxxxxx.
 123456789

Sum(tau(n), n = [1,9)) = 8 + 4 + 2*2 + 4 = 5 = 2*Sum(floor(8.5/a), a = [1,floor(sqrt(9))) - floor(sqrt(8.5))^2 = 2(8+4) - 4 = 20

2(floor(8.5/1) - 1 + floor(8.5/2) - 2) + sqrt(8.5)
2(8 - 1 + 4 - 2) + 2 = 2(7 + 2) + 2 = 2*9 + 2 = 20

sum(floor(y/a) - a, a = [2,floor(n^(1/2)))
sum(floor(y/2a) - a, a = [3,floor((n/2)^(1/2)))
sum(floor(y/3a) - a, a = [4,floor((n/3)^(1/2)))
...
sum(floor(y/floor(n^(1/3)a) - a, a = [floor(n^(1/3)),floor((n/n^(1/3))^(1/2))))

sqrt(n) - 1 + sqrt(n)/sqrt(2) - 2 + sqrt(n)/sqrt(3) - 3 + ... + sqrt(n)/sqrt(i) - i
sqrtn(n) * (1 + 1/sqrt(2) + 1/sqrt(3) + ... + 1/sqrt(i)) - (1 + 2 + 3 + ... + i)
integral(1/sqrt(x), x=[1,i]) = integral(x^(-1/2)) = 2i^(1/2)
i = [1, floor(n^(1/3))]
sqrt(n) * sqrt(n^(1/3))
O(sqrt(n) * n^(1/6)) = O(n^(1/2+1/6)) = O(n^(2/3))


9/1 = 8, 9/2 = 4, 9/3 = 2, 9/4 = 1

Sum(Tau(n), n : n < x, 2^2 | n)
Sum(Tau(n), n = { 4, 8, 12, ... })

Tau(4) + Tau(8) + Tau(12) + ...

Tau(1)*Tau(4) + Tau(2)*Tau(4) + Tau(3)*Tau(4) + ...

Tau(4)(Tau(1) + Tau(2) + Tau(3) + ...)

1, 4, 9, 16, 25

(n + 1)^2 = n^2 + 2n + 1


10/1, 10/2, 10/3

10, 5, 3

0, 1, 1

0

11/1, 11/2, 11/3

11, 5, 3

1, 1, 1

1

1 1
2 0 1 1
3 1 1 1 1 1
4 0 2 0 1 1
5 1 2 0 1 1
6 0 3 1 2 0
7 1 3 1 2 0
8 0 4 0 2 0
9 1 4 0 3 1

n % 2 + n / 2 % 2 + n / 3 % 2

1, 2, 4, 8, 16, ... = sum of the bits in base2 representation

3, 9, 27, ... = sum of the bits in base3 representation

5, 25, 125, ...

6, 10, 12, 14

1

2, 4, 6, 8, ...

1, 3, 5, 7, 9, ...

2 n / 2, 2 n / 4, 2 n / 6 => 2 n / 3

2 n / 3 = 2 * 2 n / 6 + ...

2 4 / 3 = 2 * (2 * 4 / 6) + ...

8 / 3 = 2 * (8 / 6) + ...

2 = 2 * 1 + 0

n / 3 => 2 n / 3

1 0 0  2 0 0 0
2 0 0  4 1 1 1
3 1 1  6 2 0 1
4 1 1  8 2 0 1
5 1 1 10 3 1 0
6 2 0 12 4 0 0
7 2 0 14 4 0 0
8 2 0 16 5 1 1
9 3 1 18 6 0 1

n % 3 != 0 and 2 n % 3 != 0

8 / 3 % 2 == 8 * 3 % 2 = 0

 1 0
 2 0
 4 1
 8 0
16 1
32 0

2 n / 3 == 2 floor(n / 3) + 2 (n % 3) / 3

(2 n) mod 3 = ((n mod 3) + (n mod 3)) >= 3 ? 1 : 0

floor(2 n / k) == 2 floor(n / k) + floor(2 (n % k) / k)

floor(2 n / 2 k) == 2 floor(n / k)

(2 n) mod (2 k) = 2 (n mod k)

Tangent of hyperbola
--------------------

y = n / x

x0 = n / x0
x0^2 = n
x0 = sqrt(n)
y0 = x0

y0 = -x0 + b
b = 2*sqrt(n)

tan(x) = 2sqrt(n) - x

n / x - (2 sqrt n - x) = 1

n - 2 sqrt n x + x^2 = x
x^2 - (2 sqrt(n) + 1) x + n

(2 sqrt n +/- sqrt(4 n + 4 sqrt n + 1 - 4 n)) / 2
sqrt n - sqrt(4 sqrt n + 1)/2
sqrt n - sqrt(sqrt n + 1/4)

sqrt n - n^4 ~ sqrt n

div/mod representation

1    2    3    4    5 ...
x/1, x/2, x/3, x/4, x/5
x%1, x%2, x%3, x%4, x%5

x%2, x%4, x%6, x%8, x%10

x / n = floor(x / n) + x % n / n
x / n = (x - x % n) / n + x % n / n

x / n = (x - x % 2n) / n + x % 2 n / n

2n divides x - x % 2n

x / n = 2n k / n + x % 2n / n
floor(x / n) % 2 = 2k % 2 + (x % 2n) / n % 2
floor(x / n) % 2 = x % 2n / n

floor(2x / n) % 2 = 2x % 2n / n

2x % 2n = 2 * (x % 2n) % n / n

Mod table for x = p, p a prime:

    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,...
    2, 4, 6, 8, 10,12,14,16,18,20,...
 1: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
 2: 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, ...
 3: 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, ...
 5: 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, ...
 7: 1, 3, 1, 7, 7, 7, 7, 7, 7, 7, ...
11: 1, 3, 5, 3, 1, 11,11,11,11,11,...
13: 1, 1, 1, 5, 3, 1, 13,13,13,13,...
17: 1, 1, 5, 1, 7, 5, 3, 1, 17,17,...
19: 1, 3, 1, 3, 9, 7, 5, 3, 1, 19,...

19: 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, ...


F1r(19) = 19//1 + 19//2 + 19//3 + 19//4 = 19 + 9 + 6 + 4 = 38 % 2 = 0

5..6 == 1
7..9 == 0
10..19 == 1
20... == 0

reverse(mod(19)) = repeat(19, 19//2) + select(i, 1, 19//4) + select(i + k, 1, 19//6)

1/2 + 1/4 + 1/6 + 1/8

Mod Table up to 40:

 0:  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 1:  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 2:  0  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 3:  1  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3
 4:  0  0  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4
 5:  1  1  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 6:  0  2  0  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6
 7:  1  3  1  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7
 8:  0  0  2  0  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8
 9:  1  1  3  1  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9
10:  0  2  4  2  0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
11:  1  3  5  3  1 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
12:  0  0  0  4  2  0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12
13:  1  1  1  5  3  1 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
14:  0  2  2  6  4  2  0 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14
15:  1  3  3  7  5  3  1 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15
16:  0  0  4  0  6  4  2  0 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16
17:  1  1  5  1  7  5  3  1 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17
18:  0  2  0  2  8  6  4  2  0 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18
19:  1  3  1  3  9  7  5  3  1 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19
20:  0  0  2  4  0  8  6  4  2  0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
21:  1  1  3  5  1  9  7  5  3  1 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
22:  0  2  4  6  2 10  8  6  4  2  0 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22
23:  1  3  5  7  3 11  9  7  5  3  1 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23
24:  0  0  0  0  4  0 10  8  6  4  2  0 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
25:  1  1  1  1  5  1 11  9  7  5  3  1 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25
26:  0  2  2  2  6  2 12 10  8  6  4  2  0 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26
27:  1  3  3  3  7  3 13 11  9  7  5  3  1 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27
28:  0  0  4  4  8  4  0 12 10  8  6  4  2  0 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28
29:  1  1  5  5  9  5  1 13 11  9  7  5  3  1 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29
30:  0  2  0  6  0  6  2 14 12 10  8  6  4  2  0 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
31:  1  3  1  7  1  7  3 15 13 11  9  7  5  3  1 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31
32:  0  0  2  0  2  8  4  0 14 12 10  8  6  4  2  0 32 32 32 32 32 32 32 32 32 32 32 32 32 32
33:  1  1  3  1  3  9  5  1 15 13 11  9  7  5  3  1 33 33 33 33 33 33 33 33 33 33 33 33 33 33
34:  0  2  4  2  4 10  6  2 16 14 12 10  8  6  4  2  0 34 34 34 34 34 34 34 34 34 34 34 34 34
35:  1  3  5  3  5 11  7  3 17 15 13 11  9  7  5  3  1 35 35 35 35 35 35 35 35 35 35 35 35 35
36:  0  0  0  4  6  0  8  4  0 16 14 12 10  8  6  4  2  0 36 36 36 36 36 36 36 36 36 36 36 36
37:  1  1  1  5  7  1  9  5  1 17 15 13 11  9  7  5  3  1 37 37 37 37 37 37 37 37 37 37 37 37
38:  0  2  2  6  8  2 10  6  2 18 16 14 12 10  8  6  4  2  0 38 38 38 38 38 38 38 38 38 38 38
39:  1  3  3  7  9  3 11  7  3 19 17 15 13 11  9  7  5  3  1 39 39 39 39 39 39 39 39 39 39 39
40:  0  0  4  0  0  4 12  8  4  0 18 16 14 12 10  8  6  4  2  0 40 40 40 40 40 40 40 40 40 40

f(x) = n/x

f'(x) = -n/x^2

f'(sqrt sqrt n) = -n / sqrt n = -sqrt n

F1r(2x) = F1r(x) + sum(x/n, n=[1,floor sqrt x); i odd)

n/1, n/2, n/3, n/4, n/5, n/6, ...

2n/1, 2n/2, 2n/3, 2n/4, 2n/5, 2n/6, ...

2n/1, 2n/3, 2n/5, ...; n/1, n/2, n/3, ...

2(n/1)+, 2(n/3)+

2n//x % 2 = (n%x >= x//2 ? 1 : 0)
