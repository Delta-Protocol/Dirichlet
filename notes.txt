- file Connect bug: shift with computed lhs miscalculated
- allow unequal sized numbers, e.g. when adding
- add allocator to radix32-integer
- process both roots during a single pass
- combine small factors when sieving into a single pattern

- add "right justify" method to IntegerMath

- try log(2 * x * sqrt(n)) as the cutoff: http://www.crypto-world.com/documents/contini_siqs.pdf
- convert to "round" instead of "cieling" for LogScale
- try sieving for 2 with a large number
- port multiplier code from msieve

- don't sieve for factors of multiplier (investigate first)
- for q[l], polynomial(x) | q[l] iff x = -c (2 b)^-1 mod q[l]
- fix ModularSquareRoot mod 2 if value is even, more generally if value mod modulus == 0

f(0) = -1
f(-1) = 1
f(1) = 1

f(x) = a x^2 + b x + c

f(0) = -1 = c
f(-1) = 1 = a - b + c
f(1) = 1 = a + b + c

c = -1

a - b - 1 = 1
a + b - 1 = 1

a - b = 2
a + b = 2

2 a = 4
a = 2
b = 0

f(x) = 2 x^2 - 1

f(x) = (ax + b)^2 - n

- merge add relation and create relation
- write integer mod/pow

a * b % n

         u1    u0
         v1    v0
-----------------
      u1*v0 u0*v0
u1*v1 u0*v1


- add integer reducer
- remove check from Montgomery for Montgomery32

b ^ (u1 * w + u0)

b ^ (u1 * w) * b ^ u0

b ^ w ^ u1 * b ^ u0

(2 ^ 64) ^ u1 * 2 ^ u0

- re-evaluate PPRS parameters, e.g. try increasing factor base size
- reuse PPRS infrastructure for PRS

a % d = a % (2^s dOdd) = a - (a / d) * d = a - (a / 2^s  2^s / dOdd dOdd

GCD(2^s, dOdd) = 1

if dOdd = 1:

a % d = a & ~(2^s - 1)

if d = 6, s = 1, dOdd = 3:

0 % 2 = 0, 0 % 3 = 0, 0 % 6 = 0
1 % 2 = 1, 1 % 3 = 1, 1 % 6 = 1
2 % 2 = 0, 2 % 3 = 2, 2 % 6 = 2
3 % 2 = 1, 3 % 3 = 0, 3 % 6 = 3
4 % 2 = 0, 4 % 3 = 1, 4 % 6 = 4
5 % 2 = 1, 5 % 3 = 2, 5 % 6 = 5

if a = 2^s aOdd and aOdd % 2 == 1:

a ^ e % 2^n = (2^s aOdd) ^ e % 2^n = (aOdd ^ e % 2^n) ^ 2^s % 2^n

result = aOdd ^ e % 2^n = aOdd ^ (e % 2^(n - 1)) % 2^n, and result % 2 == 1

a ^ e % 2^n = result ^ 2^s % 2^n = (result << s) & (2^n - 1)

u = (u1 * 2^n) + u0

u % d = (u1 % d) * (2^n % d) + u0 % d

modWord = 2^n % d

u % d = u1 % d * modWord + u0 % d

u / d = u1 * 2^n / d

u0 u1 * v0 v1 v2

u0 * v0  u0 * v1  u0 * v2
         u1 * v0  u1 * v1  u1 * v2

(a % b) / b mod 2^n = a * bInv mod 2^n

a divides b
a ?/ b
a ?!/ b
gcd(a, b)

a < b < c
floor division: //
move exact division to operations?
sqrt(2) should not equal 1

x = 14 (mod 13)

a = 2
b = 3
c = a b

floor(2/3).Type does the wrong thing, parsed as floor(divide(2,3).Type)

floor should return a rational

could add a modular factorial operator

(a + 1)^2 = a^2 + 2*a + 1

(m + 2^i)^2 <= n

m^2 + 2 m 2^i + 2^(2i) <= n
m^2 + 2m 2^i

Sum(1, i = 1 ... log n) = log n
Sum(1/i, i = 1 ... log n) = O(log log n)
Sum(1/i, i = 1 ... log n; isprime i) = O(log log log n)

[1 ... floor log n].Where(i => isprime i).Sum(i => 1/i)

add primorial to IntegerMath, add # primorial operator

need constants like pi

add trig functions, sin, cos, tan, etc.

add binomial coefficients

add gamma function

- Euler zeta function
- Euler product formula
- analytic continuation from Re(s) > 1 to Re(s) > 0
  - http://www.proofwiki.org/wiki/Analytic_Continuation_of_the_Riemann_Zeta_Function
  - Abel's lemma
  - reverse integration
  - collection of adjacent integrals
  - rewrite floor as variable less fractional part
  - solve former definite exactly assuming subset Re(s) > 1 for uniqueness
  - latter integral converges for all Re(s) > 0
- functional equation using gamma function extending to Re(s) < 0
  - http://www.proofwiki.org/wiki/Equivalence_of_Riemann_Zeta_Function_Definitions
- convert to entire function to eliminate pole
- expand to expression using zeros with the Weierstrass factorization theorem
  - http://en.wikipedia.org/wiki/Weierstrass_factorization_theorem
- Take the logrithmic derivative
  - http://en.wikipedia.org/wiki/Logarithmic_derivative

Assume there are a finite number of twin primes.
Then there is a largest pair of primes, p[max] and p[max] + 2.
For every prime p[i] larger than this pair, p[i] + 2 is composite.
Consider p[max] < p[i] < p[max]^2.
p[i] + 2 is divisible by a prime less than p[max].

4....
3x...
2x...
1xxx.
 1234

Sum(tau(n), n = [1,4)) = 3 + 1 + 1 = 5 = 2*Sum(floor(3.5/a), a = [1,2)) - isqrt(3.5)^2 = 2(3) - 1 = 5

9.........
8x........
7x........
6x........
5x........
4xx.......
3xx.......
2xxxx.....
1xxxxxxxx.
 123456789

Sum(tau(n), n = [1,9)) = 8 + 4 + 2*2 + 4 = 5 = 2*Sum(floor(8.5/a), a = [1,floor(sqrt(9))) - floor(sqrt(8.5))^2 = 2(8+4) - 4 = 20

2(floor(8.5/1) - 1 + floor(8.5/2) - 2) + sqrt(8.5)
2(8 - 1 + 4 - 2) + 2 = 2(7 + 2) + 2 = 2*9 + 2 = 20

sum(floor(y/a) - a, a = [2,floor(n^(1/2)))
sum(floor(y/2a) - a, a = [3,floor((n/2)^(1/2)))
sum(floor(y/3a) - a, a = [4,floor((n/3)^(1/2)))
...
sum(floor(y/floor(n^(1/3)a) - a, a = [floor(n^(1/3)),floor((n/n^(1/3))^(1/2))))

sqrt(n) - 1 + sqrt(n)/sqrt(2) - 2 + sqrt(n)/sqrt(3) - 3 + ... + sqrt(n)/sqrt(i) - i
sqrtn(n) * (1 + 1/sqrt(2) + 1/sqrt(3) + ... + 1/sqrt(i)) - (1 + 2 + 3 + ... + i)
integral(1/sqrt(x), x=[1,i]) = integral(x^(-1/2)) = 2i^(1/2)
i = [1, floor(n^(1/3))]
sqrt(n) * sqrt(n^(1/3))
O(sqrt(n) * n^(1/6)) = O(n^(1/2+1/6)) = O(n^(2/3))


9/1 = 8, 9/2 = 4, 9/3 = 2, 9/4 = 1

Sum(Tau(n), n : n < x, 2^2 | n)
Sum(Tau(n), n = { 4, 8, 12, ... })

Tau(4) + Tau(8) + Tau(12) + ...

Tau(1)*Tau(4) + Tau(2)*Tau(4) + Tau(3)*Tau(4) + ...

Tau(4)(Tau(1) + Tau(2) + Tau(3) + ...)

1, 4, 9, 16, 25

(n + 1)^2 = n^2 + 2n + 1


10/1, 10/2, 10/3

10, 5, 3

0, 1, 1

0

11/1, 11/2, 11/3

11, 5, 3

1, 1, 1

1

1 1
2 0 1 1
3 1 1 1 1 1
4 0 2 0 1 1
5 1 2 0 1 1
6 0 3 1 2 0
7 1 3 1 2 0
8 0 4 0 2 0
9 1 4 0 3 1

n % 2 + n / 2 % 2 + n / 3 % 2

1, 2, 4, 8, 16, ... = sum of the bits in base2 representation

3, 9, 27, ... = sum of the bits in base3 representation

5, 25, 125, ...

6, 10, 12, 14

1

2, 4, 6, 8, ...

1, 3, 5, 7, 9, ...

2 n / 2, 2 n / 4, 2 n / 6 => 2 n / 3

2 n / 3 = 2 * 2 n / 6 + ...

2 4 / 3 = 2 * (2 * 4 / 6) + ...

8 / 3 = 2 * (8 / 6) + ...

2 = 2 * 1 + 0

n / 3 => 2 n / 3

1 0 0  2 0 0 0
2 0 0  4 1 1 1
3 1 1  6 2 0 1
4 1 1  8 2 0 1
5 1 1 10 3 1 0
6 2 0 12 4 0 0
7 2 0 14 4 0 0
8 2 0 16 5 1 1
9 3 1 18 6 0 1

n % 3 != 0 and 2 n % 3 != 0

8 / 3 % 2 == 8 * 3 % 2 = 0

 1 0
 2 0
 4 1
 8 0
16 1
32 0

2 n / 3 == 2 floor(n / 3) + 2 (n % 3) / 3

(2 n) mod 3 = ((n mod 3) + (n mod 3)) >= 3 ? 1 : 0

floor(2 n / k) == 2 floor(n / k) + floor(2 (n % k) / k)

floor(2 n / 2 k) == 2 floor(n / k)

(2 n) mod (2 k) = 2 (n mod k)

Tangent of hyperbola
--------------------

y = n / x

x0 = n / x0
x0^2 = n
x0 = sqrt(n)
y0 = x0

y0 = -x0 + b
b = 2*sqrt(n)

tan(x) = 2sqrt(n) - x

n / x - (2 sqrt n - x) = 1

n - 2 sqrt n x + x^2 = x
x^2 - (2 sqrt(n) + 1) x + n

(2 sqrt n +/- sqrt(4 n + 4 sqrt n + 1 - 4 n)) / 2
sqrt n - sqrt(4 sqrt n + 1)/2
sqrt n - sqrt(sqrt n + 1/4)

sqrt n - n^4 ~ sqrt n

div/mod representation

1    2    3    4    5 ...
x/1, x/2, x/3, x/4, x/5
x%1, x%2, x%3, x%4, x%5

x%2, x%4, x%6, x%8, x%10

x / n = floor(x / n) + x % n / n
x / n = (x - x % n) / n + x % n / n

x / n = (x - x % 2n) / n + x % 2 n / n

2n divides x - x % 2n

x / n = 2n k / n + x % 2n / n
floor(x / n) % 2 = 2k % 2 + (x % 2n) / n % 2
floor(x / n) % 2 = x % 2n / n

floor(2x / n) % 2 = 2x % 2n / n

2x % 2n = 2 * (x % 2n) % n / n

Mod table for x = p, p a prime:

    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,...
    2, 4, 6, 8, 10,12,14,16,18,20,...
 1: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
 2: 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, ...
 3: 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, ...
 5: 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, ...
 7: 1, 3, 1, 7, 7, 7, 7, 7, 7, 7, ...
11: 1, 3, 5, 3, 1, 11,11,11,11,11,...
13: 1, 1, 1, 5, 3, 1, 13,13,13,13,...
17: 1, 1, 5, 1, 7, 5, 3, 1, 17,17,...
19: 1, 3, 1, 3, 9, 7, 5, 3, 1, 19,...

19: 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, ...


F1r(19) = 19//1 + 19//2 + 19//3 + 19//4 = 19 + 9 + 6 + 4 = 38 % 2 = 0

5..6 == 1
7..9 == 0
10..19 == 1
20... == 0

reverse(mod(19)) = repeat(19, 19//2) + select(i, 1, 19//4) + select(i + k, 1, 19//6)

1/2 + 1/4 + 1/6 + 1/8

Mod Table up to 40:

 0:  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 1:  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 2:  0  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 3:  1  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3
 4:  0  0  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4
 5:  1  1  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 6:  0  2  0  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6
 7:  1  3  1  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7
 8:  0  0  2  0  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8
 9:  1  1  3  1  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9
10:  0  2  4  2  0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
11:  1  3  5  3  1 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
12:  0  0  0  4  2  0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12
13:  1  1  1  5  3  1 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13
14:  0  2  2  6  4  2  0 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14
15:  1  3  3  7  5  3  1 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15
16:  0  0  4  0  6  4  2  0 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16
17:  1  1  5  1  7  5  3  1 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17
18:  0  2  0  2  8  6  4  2  0 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18
19:  1  3  1  3  9  7  5  3  1 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19
20:  0  0  2  4  0  8  6  4  2  0 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
21:  1  1  3  5  1  9  7  5  3  1 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21
22:  0  2  4  6  2 10  8  6  4  2  0 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22
23:  1  3  5  7  3 11  9  7  5  3  1 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23
24:  0  0  0  0  4  0 10  8  6  4  2  0 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
25:  1  1  1  1  5  1 11  9  7  5  3  1 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25
26:  0  2  2  2  6  2 12 10  8  6  4  2  0 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26
27:  1  3  3  3  7  3 13 11  9  7  5  3  1 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27
28:  0  0  4  4  8  4  0 12 10  8  6  4  2  0 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28
29:  1  1  5  5  9  5  1 13 11  9  7  5  3  1 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29
30:  0  2  0  6  0  6  2 14 12 10  8  6  4  2  0 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30
31:  1  3  1  7  1  7  3 15 13 11  9  7  5  3  1 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31
32:  0  0  2  0  2  8  4  0 14 12 10  8  6  4  2  0 32 32 32 32 32 32 32 32 32 32 32 32 32 32
33:  1  1  3  1  3  9  5  1 15 13 11  9  7  5  3  1 33 33 33 33 33 33 33 33 33 33 33 33 33 33
34:  0  2  4  2  4 10  6  2 16 14 12 10  8  6  4  2  0 34 34 34 34 34 34 34 34 34 34 34 34 34
35:  1  3  5  3  5 11  7  3 17 15 13 11  9  7  5  3  1 35 35 35 35 35 35 35 35 35 35 35 35 35
36:  0  0  0  4  6  0  8  4  0 16 14 12 10  8  6  4  2  0 36 36 36 36 36 36 36 36 36 36 36 36
37:  1  1  1  5  7  1  9  5  1 17 15 13 11  9  7  5  3  1 37 37 37 37 37 37 37 37 37 37 37 37
38:  0  2  2  6  8  2 10  6  2 18 16 14 12 10  8  6  4  2  0 38 38 38 38 38 38 38 38 38 38 38
39:  1  3  3  7  9  3 11  7  3 19 17 15 13 11  9  7  5  3  1 39 39 39 39 39 39 39 39 39 39 39
40:  0  0  4  0  0  4 12  8  4  0 18 16 14 12 10  8  6  4  2  0 40 40 40 40 40 40 40 40 40 40

f(x) = n/x

f'(x) = -n/x^2

f'(sqrt sqrt n) = -n / sqrt n = -sqrt n

F1r(2x) = F1r(x) + sum(x/n, n=[1,floor sqrt x); i odd)

n/1, n/2, n/3, n/4, n/5, n/6, ...

2n/1, 2n/2, 2n/3, 2n/4, 2n/5, 2n/6, ...

2n/1, 2n/3, 2n/5, ...; n/1, n/2, n/3, ...

2(n/1)+, 2(n/3)+

2n//x % 2 = (n%x >= x//2 ? 1 : 0)

i = 3 (odd)
o = 1 (odd)
length = 8
length2 = 4

0 1 2 3 4 5 6 7
- x - - - - - x

  0   1   2   3
  x   -   -   x

i = 3 (odd)
o = 1 (odd)
length = 7
length2 = 4

0 1 2 3 4 5 6
- x - - - - -

  0   1   2  
  x   -   -  

if p = 7, k % p element of { 0, ..., 6 }, p - k % p element of { 1, ..., 7 }

j = p - k % p
j += ((j & 1) - 1) & p

2 3 4 5 6 7 8 (9 = 2 + 7)

3   5   7
0   1   2

Jump-free expression to subtract p from n if n >= p:

p = 7, n = 1, ..., 7 => 1, ..., 6, 0

n -= ((p - n - 1) >> 31) & p

vs.

if (n >= p) p -= p

7  8  9 10 11 12 13

0  1  2  3  4  5  6

7     9    11    13
0     1     2     3

15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
x        x        x        x        x        x
x              x              x              x

cycleSize = 15

cycleStart = 15, 45, 75, 105, ...

cycleStart = 15 % 30

100 = 2 2 5 5
99 = 3 3 11
55 = 5 11

When 2 is processed:
66 is incremented (previously 0)
66 is composite

When 3 is processed:
66 is incremented (previously 1)

When 5 is processed:
divisors[55] is incremented (previously 0)
55 is composite

all numbers less the p[n]# (nth primorial) have less than n prime factors

- when adding/merging Primes to Primes in PrimeColleciton, re-use arrays instead of allocating new ones

Method of using approximate log base 2 values instead exact multiplication
==========================================================================

let k: number >= sqrt(size) with n unique prime factors p[1], p[2], ..., p[n]
with p[1] < p[2] < ... < p[n] and p[n] > sqrt(k)

sum(ceiling(log2(p[i]), i=[1,n]) >= floor(log2(k))

sum(ceiling(log2(p), i=[1,n-1]) < floor(log2(k))

because:

sum(log2(p[i]), i=[1,n]) = log2(k)
sum(log2(p[i]), i=[1,n-1]) + log2(p[n]) = log2(k)
sum(log2(p[i]), i=[1,n-1]) = log2(k) - log2(p[n]) <= log2(k)/2
sum(ceiling(log2(p[i])), i=[1,n-1]) <= log2(k)/2 + n - 1

if k ~ 2^32, log2(k)/2 = 16, n <= 9 so 

sum(ceiling(log2(p[i])), i=[1,n-1]) <= 16 + 9 - 1 = 24

and yet:

floor(log2(k)) >= 31

neg = p >> 31
abs(p) = (p & ~neg) - (p & neg)

sign = [1, 0 -1]
flip = -1
value = sign * flip

c t d
0 0 0
0 1 0
0 2 0
0 3 0

1 0 0
1 1 1
1 2 2
1 3 3

2 0 0
2 1 2
2 2 0
2 3 2

3 0 0
3 1 3
3 2 2
3 3 1

 0 => 0,  0 & 3 = 0
-1 => 3, -1 & 3 = 3
-2 => 2, -2 & 3 = 2
-3 => 1, -3 & 3 = 1
-4 => 0, -4 & 3 = 0

Sum(mu(d)tausum(x/d^2), d=[1,sqrt(x)])

integral(sqrt(x)/d, d=[d1,d2])

sqrt(x)integral(1/d, d=[d1,d2])

sqrt(x)(log(d2) - log(d1))

total = sqrt(x)log(sqrt(x))

sqrt(x)log(d) = sqrt(x)log(sqrt(x))/2

log(d) = log(x^(1/4))
d = x^(1/4)

sqrt(x)log(d) = sqrt(x)log(sqrt(x))/10

log(d) = log(x^(1/4))
d = x^(1/4)

0 1 2 3 4 5 6 7 8 9
1 1
2 0 1
3 1 1 1
4 0 0 1 1
5 1 0 1 1 1
6 0 1 0 1 1
7 1 1 0 1 1
8 0 0 0 0 1
9 1 0 1 0 1


              50
1000 500 333 250 200 = current

1    2   3   4   5





current = y / (i + 1)
delta = current - previous
mod = y - currrent * (i + 1) = y - current * i - current

current += delta
--i

mod = y - (current + delta) * i
mod = y - current * i - delta * i
mod += current - delta * i

- test new multiplication free algorithm on TauSumInnerWorkerMedium => not faster
- rebalance TauSumInnerParallel when uneven
- avoid 128-bit double division

y = n / x


y' = -n / x^2
y'' = 2n / x^3

1 = 2n / x^3
x^3 = 2n
x = (2n)n^(1/3)

div[i] = floor(y/(i+1))
delta[i] = div[i] - div[i+1]
mod[i] = y - div[i]i
mod[i+1] = y - div[i+1](i+1)

mod[i] - mod[i+1] = (y - div[i]i) - (y - div[i + 1](i + 1))
mod[i] - mod[i+1] = div[i + 1](i + 1) -div[i]i
div_est[i] = div[i+1] + delta[i+1]
mod[i] - mod[i+1] = div[i+1](i+1) - (div[i+1] + delta[i+1])i
mod[i] - mod[i+1] = div[i+1] - delta[i+1]i
mod[i] = mod[i+1] + div[i+1] - delta[i+1]i

for fixed delta:

mod[i] = mod[i], div[i] = div[i]
mod[i-1] = mod[i] + div[i] - delta*i + delta, div[i-1] = div[i] + delta
mod[i-2] = mod[i-1] + div[i-1] - delta*i + 2delta
mod[i-2] = mod[i] + div[i] - delta*i + delta + div[i] + delta - delta*i + 2delta
mod[i-2] = mod[i] + 2div[i] - delta(2i - 3))
mod[i-j] = mod[i] + j(div[i]-delta*i) + (1+2+...+j)
mod[i-j] = mod[i] + j(div[i]-delta*i) + j(j + 1)/2

sqrt(1024) = 32

1024 / 32 = 32, 1024 % 32 = 0, delta = 1
1024 / 31 = 33, 1024 % 31 = 1, delta = 1
1024 / 30 = 34, 1024 % 30 = 4, delta = 1
1024 / 29 = 35, 1024 % 29 = 9, delta = 1
1024 / 28 = 36, 1024 % 28 = 16, delta = 1
1024 / 27 = 37, 1024 % 27 = 25, delta = 1
1024 / 26 = 39, 1024 % 26 = 10, delta = 2
1024 / 25 = 40, 1024 % 25 = 24, delta = 1

j^2 = i = sqrt(y) - j
j^2 + j - sqrt(y) = 0

a = 1, b = 1, c = -sqrt(y)

j = (-1 + sqrt(1 + 4c))/2
j = sqrt(1 + 4c)/2 - 1/2
j = sqrt(4c)/2
j = 2sqrt(c)/2
j = sqrt(c)
j = sqrt(sqrt(y))
j = 32

i = 1024 - 32 = 992

c = y/i
dc/di = -y/i^2

-c'(838) = 1048578/838^2 = 1.49 ~= 3/2

1/1,      2/1,      3/1,      4/1,      5/1,        6/1,
1/1, 3/2, 2/1, 5/2, 3/1, 7/2, 4/1,

30/30, 31/30, 32/30, 

x^0.5 - x^0.49 = (x^0.01-1)x^0.49 = (x^0.1-1)(x^0.1+1)x^0.49

abs(y%i-i) >= 1 if y and i are relatively prime

How long until the error for a linear estimate of the hyperbola
exceeds one part in the independent variable?

m = -y/i0^2
clin = -y/i0^2 i + b
y/i0 = -y/i0^2 i0 + b
y/i0 = -y/i0 + b
2y/i0 = b

clin = -y/i0^2 i + 2y/i0

c - clin = 1/i = y/i + y/i0^2 i - 2y/i0

1 = y + y/i0^2 i^2 - 2y/i0 i

y/i0^2 i^2 - 2y/i0 i + y - 1 = 0

a = y/i0^2
b = -2y/i0
c = y - 1

i = (2y/i0 +/- sqrt(4y^2/i0^2 - 4y/i0^2(y - 1))/(2y/i0^2)
i = (2y/i0 + sqrt(4y^2/i0^2 - 4y^2/i0^2 + 4y/i0^2))(2y/i0^2)
i = (2y/i0 + sqrt(4y/i0^2))/(2y/i0^2)
i = (2y/i0 + 2/i0(sqrty))/(2y/i0^2)
i = (y/i0 + sqrt(y)/i0)/(y/i0^2)
i = (y + sqrt(y))/i0/(y/i0^2)
i = i0(y + sqrt(y))/y
i = i0(1 + 1/sqrt(y))
i = i0 + i0/sqrt(y)

check

i0 = 1024
div0 = 1024
i1 = 1023
div1 = 1025.000977

divlin = -1 i + 2048
divlin(i0) = 1024
divlin(i1) = 1025

div1 - divlin(i1) = 1025.000977 - 1025 = 0.000977 ~= 1/1023 = 0.000977

n/1 n/2 n/3 n/4 n/5 n/6

    2n/2    2n/4    2n/6

2n/1    2n/3


n/3 => 2n/3

n=n/3*3+n%3

2n=2n/3*3+2n%3

8/3=2, 8%3=2
16/3=5, 16%3=1

2(n/3) + 2(n%3)/3

y = x^2

x y
0 0
1 1
2 4
3 9

Sum(x^2, x=[0,0]) = 1
Sum(x^2, x=[1,1]) = 2
Sum(x^2, x=[2,2]) = 4


div = y/i
div' = -y/i^2
div'' = 2y/i^3

fit a parabola at the right end-point, matching first and second derivatives

div(sqrt(y)) = y/sqrt(y) = sqrt(y)

divpar = a i^2 + b i + c
divpar' = 2a i + b
divpar'' = 2a

sqrt(y) = a sqrt(y)^2 + b sqrt(y) + c
sqrt(y) = a y + b sqrt(y) + c

2a i + b = -y/i^2
2a sqrt(y) + b = -y/sqrt(y)^2
2a sqrt(y) + b = -1

2a = 2y/i^3
a = y/sqrt(y)^3
a = 1/sqrt(y)

2/sqrt(y)sqrt(y) + b = -1
2 + b = -1
b = -3

sqrt(y) = sqrt(y)^2/sqrt(y) - 3 sqrt(y) + c
c = 4sqrt(y) - sqrt(y)
c = 3sqrt(y)

divpar = 1/sqrt(y)i^2 - 3i + 3sqrt(y)
=====================================

divpar(sqrt(y)) = sqrt(y) - 3sqrt(y) + 3sqrt(y) = sqrt(y) (check)

find point with error exceeding one part in the independent variable

y/i - (1/sqrt(y)i^2 - 3i + 3sqrt(y)) = 1/i
y/i - 1/i = 1/sqrt(y)i^2 - 3i + 3sqrt(y)
1/sqrt(y)i^3 - 3i^2 + 3sqrt(y)i - (y-1) = 0

a = 1/sqrt(y)
b = -3
c = 3sqrt(y)
d = 1-y

discriminant = 18abcd - 4b^3d + b^2c^2 - 4ac^3 - 27a^2^d^2
d1 = 18/sqrt(y)(-3)3sqrt(y)(1-y) = -162(1-y)
d2 = 4(-3)^3(1-y) = -108(1-y)
d3 = (-3)^2(3sqrt(y))^2 = 81y
d4 = 4(1/sqrt(y)(3sqrt(y))^3 = 108y
d5 = 27(1/sqrt(y))^2(1-y)^2 = 27(1-y)^2/y

discriminant = -162(1-y) - -108(1-y) + 81y - 108y - 27(1-y)^2/y
discriminant = 162y - 162 - 108y + 108 + 81y - 108y - 27(1-y)^2/y
discriminant = -54 + 27y - 27(y-1)^2/y
discriminant = -27(2 - y + (y-1)^2/y)

(y-1)^2/y = (y^2-2y+1)/y = (y-2+1/y)

discriminant = -27(2 - y + y - 2 + 1/y)
discriminant = -27(1/y) = -27/y

tmp2^2 = -27a^2discriminant = -27/sqrty^2*-27/y = 27^2/y^2
tmp2 = 27/y

tmp1 = 2*b^3 - 9abc + 27a^2d
tmp1 = 2*-27 - 9/sqrty(-3)3sqrty + 27/y*(1-y)
tmp1 = -54 + 81 + 27(1/y-1)
tmp1 = 27 + 27/y -27 = 27/y

1/2(tmp1 + tmp2) = 27/y
1/2(tmp1 - tmp2) = 0

i = -b/(3a) - 1/(3a)*cbrt(1/2(tmp1 + tmp2)) - 1/(3a)*cbrt(1/2(tmp1 - tmp2))
i = -(-3)/(3/sqrt(y)) - 1/(3/sqrt(y))*cbrt(27/y) - 0
i = sqrt(y) - sqrt(y)/3*3/cbrt(y)

i = sqrty - sqrty/cbrty

j = y^((1/2) - (1/3))

j = y^(1/6)
===========

piecewise parabolic approximation
=================================

div = y/i
div' = -y/i^2
div'' = 2y/i^3

divpar = a i^2 + b i + c
divpar' = 2a i + b
divpar'' = 2a

div'' = divpar''
2y/i^3 = 2a
a = y/i^3

div' = divpar'
2a i + b = -y/i^2
b = -y/i^2 - 2y/i^3 i
b = -3y/i^2

y/i = a i^2 + b i + c
c = y/i - a i^2 - bi
c = y/i - y/i^3 i^2 - -3y/i^2 i
c = y/i - y/i + 3y/i
c = 3y/i

a = y/i^3
b = -3y/i^2
c = 3y/i

number of intervals = O(x^(1/3)log(x))

divpar(i) = y/i0^3 i^2 - 3y/i0^2 i +3y/i0
divpar(i) = y/i0^3(i^2 - 3 i0 i + 3 i0^2)

looking for a closed form expression for sum of a modular quadratic

divpar(i) = (p i^2 + q i + r)/s
s divpar(i) = (p i^2 + q i + r)
s floor(divpar(i)) = (p i^2 + q i + r) - (p i^2 + q i + r) mod s

sum(i^2, i=[1,n]) = n(n+1)(2n+1)/6


p i^2 + q i + r
p(i+1)^2 + q(i+1) + r
p(i^2+2i+1) + q i + q + r
p i^2 + 2p i + p + q i + q + r

poly(i+1) = poly(i) + p(2i+1) + q

divpar(i) = y/i0^3(i^2 - 3 i0 i + 3 i0^2)
divpar(j) = y/i0^3((i0+j)^2 - 3 i0(i0+j) + 3 i0^2)
divpar(j) = y/i0^3(i0^2 + 2i0 j + j^2 - 3 i0^3 - 3i0 j + 3 i0^2)
divpar(j) = y/i0^3(j^2 - i0 j + i0^2)

poly(j) = j^2 - i0 j + i0^2
poly(j+1) = (j+1)^2 - i0(j+1) + i0^2
poly(j+1) = j^2 + 2j + 1 + i0j + i0 + i0^2
poly(j+1) = poly(j) + 2j + i0+1

divpar(j) = y/i0^3(j^2 - i0 j + i0^2)

how many numbers between cbrt(y) and sqrt(y) can evenly divide y

i = combination of prime factors of y <= sqrt(y)

y = p1^e1 * p2^e2 * ... * pn^en

n <= m, pm# >= y, n <= log2 y

e1 <= log2 y

e1+e2+...+en <= log2 y

(e1+1)(e2+1)...(en+1)

2^(log2 y)

 0  1  2  3  4  5  6  7  8  9 10
 0  7 14 21 28 35 42 49 56 63 70
 0  0  1  2  2  3  4  4  5  6  7

                               *
                            *  *
                         *  *  *
                   *  *  *  *  *
                *  *  *  *  *  *
          *  *  *  *  *  *  *  *
       *  *  *  *  *  *  *  *  *
 -------------------------------
  1  0 1  1  0  1  1  0  1  1  1


7/10 = [0;1,2,3]

0 + 1/(1 + 1/(2 + 1/3))
1/(1 + 1/(2 + 1/3)) - 1/2 = 2/10

 0  1  2  3  4  5  6
 0  5 10 15 20 25 30
 0  0  1  1  2  2  3

 0  0  1  2  2  3  4  4  5  6  0
 0  0  1  1  2  2  3  3  4  4  0
 0  0  0  1  0  1  1  1  1  2  0

1/(2pq) + 1/2(1/p+1/q+1/(pq)) + 1/4 + 

1/(2p) + (1/p + 1/2) + 1/2 + p/8 - 1/p + 1/2 - p/2(1/p - 1/2)^2

1/2p + 1/p + 1/2 + 1/2 + p/8- 1/p + 1/2 - p/2(1/p^2 - 1/p + 1/4)

1/2p + 3/2 + p/8 - p/2(1/p^2 - 1/p + 1/4)

1/2p + 3/2 + p/8 - 1/2p + 1/2 - p/8

1/2p + 3/2 - 1/2p + 1/2

2

k'a + x == 0 (mod b)

k'a == -x
k' == -xa^-1

sum( (( (ka + x)/b )) (( k/b )), k mod b)

k1|b iff k1 == 0
(k2a + x)/b iff k2a + x | b iff k2 == -xa^-1

sum( (( (ka + x)/b )) (( k/b )), k mod b) = sigma(a, b, x) - (( x/b ))(-1/2) - (-1/2)(( -xa^-1/b ))

sum( (( (ka + x)/b )) (( k/b )), k mod b) = sigma(a, b, x) + ( (( x/b )) + (( -xa^-1/b )) )/2


-(1 + x)
-1 => 0
0 => -1

- 3 * p * ScaledSawTooth(t, q)
- 3 * p * (2 * (t % q) - q)
- 6 * p * (t % q) + 3 * p * q

- 3 * q * ScaledSawTooth(t * qInv, p)
- 3 * q * (2 * (t * qInv % p) - p)
- 6 * q * (t * qInv % p) - 3 * pq

divpar(j) = y/i0^3(j^2 - i0 j + i0^2)
divlin(j) = y/i0^2(-j + i0)
divlin(j) = -y/i0^2 j + y/i0

y = -n/x0^2 x + n/x0
x0^2y = -n x + x0 n0
x0 n = n x + x0^2 y

y j + i0^2 div <= i0 y

divlin(j) = y/i0^2(-j + i0)
